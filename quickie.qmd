---
title: "quickie"
format: html
editor: visual
---

```{r}
# Create a simulation where we have 1000 samples of 32 observations random samples drawn from a population of 1860 people on four variables with medians of the population being 12, 11, 11, and 14.  Can you give me a simulation that returns the probability of getting a sample of 32 with median values of 18, 15, 16, and 19, respectively?
# Set the seed for reproducibility
set.seed(123)

# Define the population parameters
pop_medians <- c(12, 11, 11, 14)
n_population <- 1860

# Generate the population data
population_data <- replicate(4, rnorm(n_population, mean = pop_medians, sd = 2))

# Define the sample size and number of samples
n_sample <- 32
n_samples <- 100000

# Initialize a counter for successful samples
success_count <- 0

# Run the simulation
for(i in 1:n_samples) {
  # Generate a random sample from the population
  sample_data <- replicate(4, sample(population_data, n_sample))
  
  # Check if the sample has the desired medians
  if(all(round(apply(sample_data, 2, median), 2) == c(18, 15, 16, 19))) {
    success_count <- success_count + 1
  }
}

# Calculate the probability of getting the desired sample
success_prob <- success_count / n_samples

# Print the results
cat("Probability of getting the desired sample:", success_prob, "\n")

# Create a function to simulate the sampling process

simulate_sampling <- function(pop_medians, n_population, n_sample, n_samples) {
  # Generate the population data
  population_data <- replicate(4, rnorm(n_population, mean = pop_medians, sd = 2))
  
  # Initialize a counter for successful samples
  success_count <- 0
  
  # Run the simulation
  for(i in 1:n_samples) {
    # Generate a random sample from the population
    sample_data <- replicate(4, sample(population_data, n_sample))
    
    # Check if the sample has the desired medians
    if(all(round(apply(sample_data, 2, median), 2) == c(18, 15, 16, 19))) {
      success_count <- success_count + 1
    }
  }
  
  # Calculate the probability of getting the desired sample
  success_prob <- success_count / n_samples
  
  return(success_prob)
}

# Run the simulation with the function
set.seed(123)
success_prob <- simulate_sampling(c(12, 11, 11, 14), 1860, 32, 1000)

# Print the results
cat("Probability of getting the desired sample:", success_prob, "\n")

# Create a function to simulate the sampling process with multiple scenarios

simulate_sampling_multiple <- function(scenarios) {
  # Initialize a list to store results
  results <- list()
  
  # Run simulations for each scenario
  for(scenario in scenarios) {
    set.seed(scenario$seed)
    success_prob <- simulate_sampling(scenario$pop_medians, scenario$n_population, scenario$n_sample, scenario$n_samples)
    
    # Store the results
    results[[scenario$name]] <- success_prob
  }
  
  return(results)
}

# Define the scenarios
scenarios <- list(
  list(
    name = "Scenario 1",
    seed = 123,
    pop_medians = c(12, 11, 11, 14),
    n_population = 1860,
    n_sample = 32,
    n_samples = 1000
  ),
  list(
    name = "Scenario 2",
    seed = 456,
    pop_medians = c(10, 12, 13, 15),
    n_population = 2000,
    n_sample = 32,
    n_samples = 1000
  )
)

# Run the simulation with multiple scenarios
results_multiple <- simulate_sampling_multiple(scenarios)

# Print the results
cat("Simulation Results:\n")
print(results_multiple)
  

```

